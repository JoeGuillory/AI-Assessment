#include "DemoScene.h"
#include "PathAgent.h"
#include "Agent.h"
void DemoScene::start()
{
	Scene::start();
	srand(time_t(0));
	m_nodeMap.cellSize = 25;
	std::vector<std::string> asciiMap;
	asciiMap.push_back("0000000000000000000000000000000000000000000000000000000000000000");
	asciiMap.push_back("0111111111111111111111111111111111111111111000000000000000000000");
	asciiMap.push_back("0111111111111111111111111111111111111111111000000000000000000000");
	asciiMap.push_back("0000000000000001111111111111111111111111111111111110000000000000");
	asciiMap.push_back("0000011111111111111111111111111111111111111000000010000000000000");
	asciiMap.push_back("0000010000000001111111111111111111111111111000000011111111111000");
	asciiMap.push_back("0000010000000000000000000000000000000000000000000010000000001000");
	asciiMap.push_back("0000010000000000000000000000000000000000000000000010000000001000");
	asciiMap.push_back("0011111111111111111111111111111111111111111111111111111000001000");
	asciiMap.push_back("0011111111111111111000000000000000000111111111111111111000001000");
	asciiMap.push_back("0011111111111111111000000000000000000111111111111111111000001000");
	asciiMap.push_back("0011111111111111111000000000000000000111111111111111111000001000");
	asciiMap.push_back("0011111111111111111000000000000000000111111111111111111000001000");
	asciiMap.push_back("0011111111111111111000000000000000000111111111111111111000001000");
	asciiMap.push_back("0011111111111111111000000000000000000111111111111111111000001000");
	asciiMap.push_back("0011111111111111111000000000000000000111111111111111111111111000");
	asciiMap.push_back("0011111111111111111000000000000000000111111111111111111000001000");
	asciiMap.push_back("0011111111111111111000000000000000000111111111111111111000001000");
	asciiMap.push_back("0011111111111111111000000000000000000111111111111111111000001000");
	asciiMap.push_back("0000000000000000000000000000000000000111111111111111111000001000");
	asciiMap.push_back("0000000000000000000000000000000000000111111111111111111000001000");
	asciiMap.push_back("0000000000000000000000000000000000000111111111111111111000001000");
	asciiMap.push_back("0000000000000000000000000000000000000111111111111111111000001000");
	asciiMap.push_back("0000111111111111111111111111111111111111111111111111111000001000");
	asciiMap.push_back("0000111111111111111111000000000000000000000000000000000000001000");
	asciiMap.push_back("0000111111111111111111000000000001111111111111111111111000001000");
	asciiMap.push_back("0000111111111111111111111111111111111111111111111111111111111000");
	asciiMap.push_back("0000111111111111111111000000000001111111111111111111111000000000");
	asciiMap.push_back("0000111111111111111111000000000001111111111111111111111000000000");
	asciiMap.push_back("0000000000000000000000000000000001111111111111111111111000000000");
	asciiMap.push_back("0000000000000000000000000000000001111111111111111111111000000000");
	asciiMap.push_back("0000000000000000000000000000000000000000000000000000000000000000");
	m_nodeMap.Initialise(asciiMap);

	m_pathAgent = new PathAgent();
	m_actor = new Agent();
	m_actor->setMaxSpeed(400);
	m_actor->setTarget(m_pathAgent);
	addActor(m_actor);
	addActor(m_pathAgent);
	m_pathAgent->SetNode(m_nodeMap.GetNode(1,1));
	m_pathAgent->setMaxSpeed(200);
}

void DemoScene::update(float deltaTime)
{
	Scene::update(deltaTime);
	
	
	
	Pathfinding::Node* end = m_nodeMap.GetClosestNode({ m_actor->getTransform()->getWorldPosition().x,m_actor->getTransform()->getWorldPosition().y });
	m_pathAgent->GoToNode(end);


	//Switches Between Astar and Dijkstras
	if (IsKeyPressed(KEY_SPACE))
	{
		
		if (switched == false)
		{
			m_pathAgent->SetSearchType(2);
			switched = true;
			mode.clear();
			mode.assign("Astar");
		}
		else if(switched == true)
		{
			m_pathAgent->SetSearchType(1);
			switched = false;
			mode.clear();
			mode.assign("DijkstrasSearch");
		}
	}
	
}

void DemoScene::end()
{
	Scene::end();
}

void DemoScene::draw()
{
	bool drawNodeMap = true;
	Color lineColor = { 255, 255, 255, 255 };
	m_nodeMap.Draw(true);
	Pathfinding::DrawPath(m_pathAgent->path, lineColor);
	DrawText(mode.c_str(), 600, 600, 30, WHITE);
	Scene::draw();
}
